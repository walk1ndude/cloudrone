void ObjectDetector::findObjects()
{
    Mat demo = view.clone();
    for (int i = 0; i < cascadeDetectors.size(); i++)
    {
        vector<Rect> found;
        //cascadeDetectors[i].first.detectMultiScale(view, found);
        found.push_back(Rect(0, 0, 30, 30));
        for (int r = 0; r < found.size(); r++)
        {
            marker_detection::Object object;

            cv_bridge::CvImage cvi;
            cvi.header.stamp = ros::Time::now();
            cvi.header.frame_id = "image";
            cvi.encoding = "bgr8";
            resize(Mat(view, found[r]), cvi.image, OBJECT_VIEW_SIZE);
            cvi.toImageMsg(object.view);

            object.classid = cascadeDetectors[i].second;
            object.y = (view.cols/2 - (found[r].x+found[r].width*0.5)) * (VIEW_P2M / VIEW_SCALE);
            object.x = (view.rows - (found[r].y+found[r].height*0.5)) * (VIEW_P2M / VIEW_SCALE);
            object.z = 0;
            object.wx = found[r].width * (VIEW_P2M / VIEW_SCALE);
            object.wy = found[r].height * (VIEW_P2M / VIEW_SCALE);
            object.wz = 0;

            rectangle(demo, found[r], Scalar(0,0,255));
            objects_pub.publish(object);
        }
    }
    imshow("demo", demo);
    waitKey(5);
} 

Object.msg:

sensor_msgs/Image view
int32 classid
float32 x
float32 y
float32 z
float32 wx
float32 wy
float32 wz
